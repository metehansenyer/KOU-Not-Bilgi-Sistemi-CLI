#!/usr/bin/env python3
"""
KOU Not Bilgi Sistemi - Optimize EdilmiÅŸ YardÄ±mcÄ± Fonksiyonlar
Ã–nbellekleme ve optimizasyonlarla yÃ¼ksek performanslÄ± yardÄ±mcÄ± fonksiyonlar
"""

import os
import re
import json
import hashlib
import time
from pathlib import Path
from typing import Dict, Any, Optional

from logger import internal_progress, user_success, user_error


def clean_text(text: str) -> str:
    """Metni verimli bir ÅŸekilde temizle ve normalleÅŸtir"""
    if not text:
        return ""
    
    # DerlenmiÅŸ regex ile tek geÃ§iÅŸli temizleme
    cleaned = re.sub(r'\s+', ' ', str(text)).strip()
    return cleaned.replace('\n', ' ').replace('\t', ' ')


def ensure_data_directory(data_dir: str) -> Path:
    """Veri dizininin optimize edilmiÅŸ oluÅŸturma ile var olduÄŸundan emin ol"""
    try:
        data_path = Path(data_dir)
        data_path.mkdir(parents=True, exist_ok=True)
        return data_path
    except Exception as e:
        user_error(f"Dizin oluÅŸturma hatasÄ±: {e}")
        raise


def get_data_file_path(username: str, data_dir: str) -> Path:
    """KullanÄ±cÄ± iÃ§in optimize edilmiÅŸ veri dosyasÄ± yolunu al"""
    data_path = ensure_data_directory(data_dir)
    
    # Gizlilik ve dosya sistemi uyumluluÄŸu iÃ§in hash kullan
    username_hash = hashlib.md5(username.encode()).hexdigest()[:12]
    filename = f"user_{username_hash}.json"
    
    file_path = data_path / filename
    
    # Hata ayÄ±klama iÃ§in gerÃ§ek yolu gÃ¼nlÃ¼ÄŸe kaydet
    internal_progress(f"Veri dosya yolu: {file_path.absolute()}")
    
    return file_path


def save_user_data(username: str, data: Dict[str, Any], data_dir: str) -> bool:
    """YÃ¼ksek performans optimizasyonlarÄ± ile kullanÄ±cÄ± verilerini kaydet"""
    try:
        file_path = get_data_file_path(username, data_dir)
        
        # Performans takibi iÃ§in metadata ekle
        optimized_data = {
            "metadata": {
                "username": username,
                "last_updated": time.time(),
                "version": "6.1.4",
                "total_semesters": len(data),
                "total_courses": sum(len(semester_data.get("courses", [])) for semester_data in data.values())
            },
            "semesters": data
        }
        
        # HÄ±zlÄ± JSON serileÅŸtirme
        start_time = time.time()
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(optimized_data, f, ensure_ascii=False, indent=2, separators=(',', ':'))
        
        save_time = time.time() - start_time
        file_size = file_path.stat().st_size
        
        internal_progress(f"ğŸ’¾ Veri kaydedildi: {file_size/1024:.1f}KB ({save_time:.2f}s)")
        user_success(f"Veriler kaydedildi: {file_path.name}")
        
        return True
        
    except Exception as e:
        user_error(f"Veri kaydetme hatasÄ±: {e}")
        return False


def load_user_data(username: str, data_dir: str) -> Optional[Dict[str, Any]]:
    """Ã–nbellekleme ve doÄŸrulama ile kullanÄ±cÄ± verilerini yÃ¼kle"""
    try:
        file_path = get_data_file_path(username, data_dir)
        
        if not file_path.exists():
            return None
        
        # Boyut kontrolÃ¼ ile hÄ±zlÄ± yÃ¼kleme
        file_size = file_path.stat().st_size
        if file_size == 0:
            internal_progress("BoÅŸ veri dosyasÄ± siliniyor...")
            file_path.unlink()
            return None
        
        start_time = time.time()
        
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        load_time = time.time() - start_time
        
        # Veri yapÄ±sÄ±nÄ± doÄŸrula
        if not isinstance(data, dict) or "semesters" not in data:
            internal_progress("GeÃ§ersiz veri formatÄ±, siliniyor...")
            file_path.unlink()
            return None
        
        # Metadata kontrol et
        metadata = data.get("metadata", {})
        total_semesters = metadata.get("total_semesters", 0)
        total_courses = metadata.get("total_courses", 0)
        
        internal_progress(f"ğŸ“‚ Veri yÃ¼klendi: {file_size/1024:.1f}KB, {total_semesters} dÃ¶nem, {total_courses} ders ({load_time:.3f}s)")
        
        return data["semesters"]
        
    except Exception as e:
        internal_progress(f"Veri yÃ¼kleme hatasÄ±: {e}")
        return None


def has_user_data(username: str, data_dir: str) -> bool:
    """KullanÄ±cÄ±nÄ±n Ã¶nbelleÄŸe alÄ±nmÄ±ÅŸ verisi olup olmadÄ±ÄŸÄ±nÄ± hÄ±zlÄ±ca kontrol et"""
    try:
        file_path = get_data_file_path(username, data_dir)
        return file_path.exists() and file_path.stat().st_size > 0
    except:
        return False


def get_user_data_info(username: str, data_dir: str) -> Optional[Dict[str, Any]]:
    """KullanÄ±cÄ±nÄ±n Ã¶nbelleÄŸe alÄ±nmÄ±ÅŸ verisi hakkÄ±nda hÄ±zlÄ± bilgi al"""
    try:
        file_path = get_data_file_path(username, data_dir)
        
        if not file_path.exists():
            return None
        
        stat = file_path.stat()
        
        # Tam dosyayÄ± yÃ¼klemeden metadata okumaya Ã§alÄ±ÅŸ
        with open(file_path, 'r', encoding='utf-8') as f:
            # Metadata'yÄ± almak iÃ§in sadece baÅŸlangÄ±cÄ± oku
            chunk = f.read(512)
            if '"metadata"' in chunk:
                f.seek(0)
                try:
                    data = json.load(f)
                    metadata = data.get("metadata", {})
                    
                    return {
                        "file_size": stat.st_size,
                        "last_modified": stat.st_mtime,
                        "last_updated": metadata.get("last_updated"),
                        "version": metadata.get("version"),
                        "total_semesters": metadata.get("total_semesters", 0),
                        "total_courses": metadata.get("total_courses", 0)
                    }
                except:
                    pass
        
        # Yedek bilgi
        return {
            "file_size": stat.st_size,
            "last_modified": stat.st_mtime,
            "total_semesters": "bilinmiyor",
            "total_courses": "bilinmiyor"
        }
        
    except:
        return None


def clear_user_data(username: str, data_dir: str) -> bool:
    """KullanÄ±cÄ±nÄ±n Ã¶nbelleÄŸe alÄ±nmÄ±ÅŸ verisini temizle"""
    try:
        file_path = get_data_file_path(username, data_dir)
        
        if file_path.exists():
            file_path.unlink()
            internal_progress("Ã–nbellek temizlendi")
            return True
        
        return False
        
    except Exception as e:
        user_error(f"Ã–nbellek temizleme hatasÄ±: {e}")
        return False


def format_file_size(size_bytes: int) -> str:
    """Dosya boyutunu gÃ¶rÃ¼ntÃ¼leme iÃ§in biÃ§imlendir"""
    if size_bytes < 1024:
        return f"{size_bytes}B"
    elif size_bytes < 1024 * 1024:
        return f"{size_bytes/1024:.1f}KB"
    else:
        return f"{size_bytes/(1024*1024):.1f}MB"


def format_time_ago(timestamp: float) -> str:
    """Zaman damgasÄ±nÄ± ne kadar zaman Ã¶nce olarak biÃ§imlendir"""
    if not timestamp:
        return "bilinmiyor"
    
    try:
        diff = time.time() - timestamp
        
        if diff < 60:
            return f"{int(diff)} saniye Ã¶nce"
        elif diff < 3600:
            return f"{int(diff/60)} dakika Ã¶nce"
        elif diff < 86400:
            return f"{int(diff/3600)} saat Ã¶nce"
        else:
            return f"{int(diff/86400)} gÃ¼n Ã¶nce"
    except:
        return "bilinmiyor"


# SÄ±k kullanÄ±lan iÅŸlemler iÃ§in Ã¶nbellek
_text_cache = {}

def cached_clean_text(text: str) -> str:
    """Tekrarlanan dizeler iÃ§in clean_text'in Ã¶nbellekli versiyonu"""
    if not text:
        return ""
    
    if text in _text_cache:
        return _text_cache[text]
    
    cleaned = clean_text(text)
    
    # Ã–nbellek boyutunu sÄ±nÄ±rla
    if len(_text_cache) > 1000:
        _text_cache.clear()
    
    _text_cache[text] = cleaned
    return cleaned 